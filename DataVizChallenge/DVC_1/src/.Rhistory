coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=1/log10(Population))) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void()
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=1/log10(Population))) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c()
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=1/log10(Population))) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_discrete(range = c(0, 0.2,.4,.6,.8,1))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=1/log10(Population))) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_continuous()#(range = c(0, 0.2,.4,.6,.8,1))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=1/log10(Population))) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(range = c(0, 0.2,.4,.6,.8,1))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=1/log10(Population))) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.2,.4,.6,.8,1))
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population)),breaks=seq(0,10,1)))
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population)),breaks=seq(0,10,1))
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,10,1)))
ggplot(happiness_map) +
scale_fill_viridis_c()
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat) +
View(happiness_map)
w
library(ggplot2)
library(maps)
library(mapproj)
library(dplyr)
library(tidyr)
library(gridExtra)
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = '../data/happinessdata.csv')
#Read in population data
world_population <- read.csv(file='../data/Population.csv')
world_happiness$Country[world_happiness$Country=="Congo (Brazzaville)"] <- "Republic of Congo"
world_happiness$Country[world_happiness$Country=="Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
world_population <- world_population %>% select(Country.Name,X2015_2019)
world_happiness<-merge(world_population,world_happiness,by.x="Country.Name",by.y="Country")
#Edit specific labels to merge with countries data set
world_happiness$Country[world_happiness$Country=="United States"] <- "USA"
world_happiness$Country[world_happiness$Country=="United Kingdom"] <- "UK"
#Set happiness score of each country to mean of that country over all years
world_happiness<-world_happiness %>% group_by(Country) %>% summarise(Score=mean(HappinessScore),Population=mean(X2015_2019)) %>% drop_na()
#Read in country data
countries<-map_data("world")
#Merge countries and happiness data
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,10,1)))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat) +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
ggtitle("Happiness by Country (2015-2019)") +
theme_void() +
scale_fill_viridis_c()
23
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c()
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,1,.2)))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c()
min(1/log10(happiness_map$Population))
max(1/log10(happiness_map$Population))
View(happiness_map)
max(1/log10(happiness_map$Population) %>% drop_na())
temp <- happiness_map %>% drop_na()
max(1/log10(temp$Population))
min(1/log10(temp$Population))
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0.1,.18,.01)))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c()
temp <- happiness_map %>% drop_na
temp <- happiness_map %>% drop_na()
happiness_map$pop_cat[happiness_map$pop_cat==NA] <- max(temp$pop_cat)
happiness_map$pop_cat[happiness_map$pop_cat==NA] <- 1/log10(max(temp$Population))
happiness_map$Population[happiness_map$Population==NA] <- 0
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0.1,.18,.01)))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c()
happiness_map$Population[happiness_map$Population.isna] <- 0
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0.1,.18,.01)))
happiness_map$Population[isna(happiness_map$Population)] <- 0
happiness_map$Population[is.na(happiness_map$Population)] <- 0
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0.1,.18,.01)))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c()
min(1/log10(happiness_map$Population))
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,.18,.03)))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c()
1/log10(happiness_map$Population)
min(1/log10(happiness_map$Population))
min((happiness_map$Population))
#Merge countries and happiness data
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
min((happiness_map$Population))
happiness_map$Population[is.na(happiness_map$Population)] <- 10**10
10**10
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0.1,.18,.01)))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c()
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0.09,.18,.01)))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c()
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0.09,.2,.01)))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c()
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,1,.02)))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c()
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.2,.4,.6,.8,1))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.2, 0.4, 0.6, 0.8, 1))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.1, 0.2, 0.3, 0.4, 5))
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = '../data/happinessdata.csv')
#Read in population data
world_population <- read.csv(file='../data/Population.csv')
world_happiness$Country[world_happiness$Country=="Congo (Brazzaville)"] <- "Republic of Congo"
world_happiness$Country[world_happiness$Country=="Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
world_population <- world_population %>% select(Country.Name,X2015_2019)
world_happiness<-merge(world_population,world_happiness,by.x="Country.Name",by.y="Country")
#Edit specific labels to merge with countries data set
world_happiness$Country[world_happiness$Country=="United States"] <- "USA"
world_happiness$Country[world_happiness$Country=="United Kingdom"] <- "UK"
#Set happiness score of each country to mean of that country over all years
world_happiness<-world_happiness %>% group_by(Country) %>% summarise(Score=mean(HappinessScore),Population=mean(X2015_2019)) %>% drop_na()
#Read in country data
countries<-map_data("world")
#Merge countries and happiness data
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
happiness_map$Population[is.na(happiness_map$Population)] <- 100000
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,1,.02)))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.1, 0.2, 0.3, 0.4, 0.5))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.1, 0.2, 0.3, 0.4, 1))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.1, 0.2, 0.3, 0.4, 1))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.1, 0.2, 0.3, 1))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.3, 0.5, 0.7, 1))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.25, 0.5, 0.75, 1))
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,1,.02),labels=c("Large","","Medium","","Small"))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.25, 0.5, 0.75, 1))
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,1,.02),labels=c("Large","","Medium","","Small"))
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,1,.02)),labels=c("Large","","Medium","","Small"))
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,1,.02)),labels=c("Large","","Medium","","Small"))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.25, 0.5, 0.75, 1))
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,1,.02)),labels=c("Large","Medium large","Medium","medium small","Small"))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.25, 0.5, 0.75, 1))
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,1,.02)),labels=c("Large"," ","Medium"," ","Small"))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.25, 0.5, 0.75, 1))
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,1,.02)),labels=c("Large","","Medium"," ","Small"))
ggplot(happiness_map) +
coord_quickmap() +
geom_polygon(aes(x=long, y=lat, group=group, fill=Score)) +
geom_polygon(aes(x=long, y=lat, group=group, alpha=pop_cat)) +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score",alpha="Population") +
theme_void() +
scale_fill_viridis_c() +
scale_alpha_manual(values = c(0, 0.25, 0.5, 0.75, 1))
#POINT
#Get average absolute value of latitude (distance from equator) for each country with the average happiness score
latitude<-happiness_map %>% group_by(region) %>% summarise(score=mean(Score),lat=mean(abs(lat)),pop=mean(Population)) %>% drop_na()
#BAR
#Factorize latitude into discrete categories
latitude$lat_cat<-factor(cut(latitude$lat,breaks=seq(0,70,5),labels=seq(0,65,5)))
lat_group <- latitude %>% group_by(lat_cat) %>% summarise(score=mean(score),pop=mean(pop),count=n())
latitude$lat_cat<-factor(cut(latitude$lat,breaks=seq(0,70,5),labels=seq(0,65,5)))
latitude<-latitude %>% group_by(lat_cat) %>% mutate(mean_score=mean(score))
ggplot(latitude,aes(x=lat_cat,y=score,fill=mean_score)) +
geom_boxplot() +
ggtitle("Happiness vs Distance from Equator") +
xlab(label="Distance from Equator by Latitude") +
ylab(label="Happiness Score") +
labs(fill="Average Happiness Score") +
theme_classic() +
scale_fill_viridis_c(option="magma")
setwd("~/Documents/CS_Courses/CS_710/Workshop1Group3/src")
library(ggplot2)
library(maps)
library(mapproj)
library(dplyr)
library(tidyr)
library(gridExtra)
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = '../data/happinessdata.csv')
#Read in population data
world_population <- read.csv(file='../data/Population.csv')
world_happiness$Country[world_happiness$Country=="Congo (Brazzaville)"] <- "Republic of Congo"
world_happiness$Country[world_happiness$Country=="Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
world_population <- world_population %>% select(Country.Name,X2015_2019)
world_happiness<-merge(world_population,world_happiness,by.x="Country.Name",by.y="Country")
#Edit specific labels to merge with countries data set
world_happiness$Country[world_happiness$Country=="United States"] <- "USA"
world_happiness$Country[world_happiness$Country=="United Kingdom"] <- "UK"
#Set happiness score of each country to mean of that country over all years
world_happiness<-world_happiness %>% group_by(Country) %>% summarise(Score=mean(HappinessScore),Population=mean(X2015_2019)) %>% drop_na()
#Read in country data
countries<-map_data("world")
#Merge countries and happiness data
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
#MAP
#Happiness by country map
map_plot<-ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_quickmap() +
geom_polygon() +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c(option="magma")
#Population by country map
ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=log10(Population))) +
coord_quickmap() +
geom_polygon() +
ggtitle("Population by Country (2015-2019)") +
labs(fill="Population") +
theme_void() +
scale_fill_viridis_c()
View(world_happiness)
View(countries)
View(world_population)
#Edit specific labels to merge with countries data set
world_happiness$Country[world_happiness$Country=="United States"] <- "USA"
world_happiness$Country[world_happiness$Country=="United Kingdom"] <- "UK"
#Set happiness score of each country to mean of that country over all years
world_happiness<-world_happiness %>% group_by(Country) %>% summarise(Score=mean(HappinessScore),Population=mean(X2015_2019)) %>% drop_na()
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = '../data/happinessdata.csv')
#Read in population data
world_population <- read.csv(file='../data/Population.csv')
world_happiness$Country[world_happiness$Country=="Congo (Brazzaville)"] <- "Republic of Congo"
world_happiness$Country[world_happiness$Country=="Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
world_population <- world_population %>% select(Country.Name,X2015_2019)
world_happiness<-merge(world_population,world_happiness,by.x="Country.Name",by.y="Country")
#Edit specific labels to merge with countries data set
world_happiness$Country[world_happiness$Country=="United States"] <- "USA"
world_happiness$Country[world_happiness$Country=="United Kingdom"] <- "UK"
#Set happiness score of each country to mean of that country over all years
world_happiness<-world_happiness %>% group_by(Country) %>% summarise(Score=mean(HappinessScore),Population=mean(X2015_2019)) %>% drop_na()
#Read in country data
countries<-map_data("world")
#Merge countries and happiness data
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
#MAP
#Happiness by country map
map_plot<-ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=Score)) +
coord_quickmap() +
geom_polygon() +
ggtitle("Happiness by Country (2015-2019)") +
labs(fill="Happiness Score") +
theme_void() +
scale_fill_viridis_c(option="magma")
#Population by country map
ggplot(happiness_map,aes(x=long,y=lat,group=group,fill=log10(Population))) +
coord_quickmap() +
geom_polygon() +
ggtitle("Population by Country (2015-2019)") +
labs(fill="Population") +
theme_void() +
scale_fill_viridis_c()
#Happiness by country map, brightness by population
happiness_map$Population[is.na(happiness_map$Population)] <- 100000
happiness_map$pop_cat<-factor(cut(1/log10(happiness_map$Population),breaks=seq(0,1,.02)),labels=c("Large","","Medium"," ","Small"))
library(ggplot2)
library(maps)
library(mapproj)
library(dplyr)
library(tidyr)
library(gridExtra)
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = '../data/happinessdata.csv')
#Read in population data
world_population <- read.csv(file='../data/Population.csv')
world_happiness$Country[world_happiness$Country=="Congo (Brazzaville)"] <- "Republic of Congo"
world_happiness$Country[world_happiness$Country=="Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
world_population <- world_population %>% select(Country.Name,X2015_2019)
world_happiness<-merge(world_population,world_happiness,by.x="Country.Name",by.y="Country")
#Edit specific labels to merge with countries data set
world_happiness$Country[world_happiness$Country=="United States"] <- "USA"
world_happiness$Country[world_happiness$Country=="United Kingdom"] <- "UK"
#Set happiness score of each country to mean of that country over all years
world_happiness<-world_happiness %>% group_by(Country) %>% summarise(Score=mean(HappinessScore),Population=mean(X2015_2019)) %>% drop_na()
#Read in country data
countries<-map_data("world")
#Merge countries and happiness data
happiness_map<-merge(countries,world_happiness,by.x="region",by.y="Country",all=TRUE)
happiness_map<-arrange(happiness_map,group,order)
View(world_population)
View(world_happiness)
View(world_happiness)
View(world_happiness)
View(world_happiness)
View(world_happiness)
#Read in combined happiness data (2015-2019)
world_happiness <- read.csv(file = '../data/happinessdata.csv')
#Read in population data
world_population <- read.csv(file='../data/Population.csv')
world_happiness$Country[world_happiness$Country=="Congo (Brazzaville)"] <- "Republic of Congo"
world_happiness$Country[world_happiness$Country=="Congo (Kinshasa)"] <- "Democratic Republic of the Congo"
world_population$X2015_2019 <- (world_population$X2015+world_population$X2016+world_population$X2017+world_population$X2018+world_population$X2019)/5
world_population <- world_population %>% select(Country.Name,X2015_2019)
world_happiness<-merge(world_population,world_happiness,by.x="Country.Name",by.y="Country")
#Edit specific labels to merge with countries data set
world_happiness$Country[world_happiness$Country=="United States"] <- "USA"
world_happiness$Country[world_happiness$Country=="United Kingdom"] <- "UK"
write.csv(world_happiness,"world_happiness.csv", row.names = FALSE)
