lb2<-((n2-1)*s2)/qchisq(1-alpha2/2,n2-1) # lower bound of CI
ub2<-((n2-1)*s2)/qchisq(alpha2/2,n2-1) # upper bound of CI
c(lb2,ub2)
method1<-c(79,66,57,91,42,59)
alpha1 = 1-.99 # 99% confidence
m1<-mean(method1) # sample mean
s1<-var(method1) # sample variance
n1<-length(method1)
lb1<-m1-(qt(1-alpha1/2,n1-1)*sqrt(s1))/sqrt(n1) # lower bound of CI
ub1<-m1+(qt(1-alpha1/2,n1-1)*sqrt(s1))/sqrt(n1) # upper bound of CI
c(lb1,ub1)
x<-c(13.6,18.3,35.7,11.7,32.3,45.9)
theta_hat<-mean(x)/22
y<-seq(0,50,.01)
plot(y,dgamma(y,shape=2,scale= theta_hat),type="l")
title("Toby Chappell")
# Question 1
# a
pnorm(-4,-6,1)-pnorm(-8,-6,1)
# b
qnorm(.995)
# c
pnorm(-8,-12,sqrt(40))-pnorm(-10,-12,sqrt(40))
# d
qnorm(.3,-12,sqrt(40))
# e
1-pt(24,15)
# f
1/8*qt(.975,15)
# g
1-pchisq(1,6)
# h
4*qchisq(.6,6)
# i
1-pf(7/3,6,7)
# j
6/7*qf(.975,6,7)
c(lb1,ub1)
c(lb2,ub2)
pnorm(.05)
qnorm(.05)
qnorm(.025)
qnorm(.0125)
qnorm(.005)
qnorm(.0001)
qnorm(.0075)
qnorm(.0025)
qnorm(.001)
qnorm(.002)
qnorm(.0015)
qnorm(.00175)
qnorm(.0019)
qnorm(.0012)
qnorm(.00125)
qnorm(.0013)
qnorm(.0014)
qnorm(.00135)
qnorm(.001375)
qnorm(.00135)
qnorm(.001355)
qnorm(.001345)
qnorm(.001349)
qnorm(.0013499)
.125*2
.135*2
#### Load Required Packages ####
library(rayshader)
library(ggplot2)
library(tidyverse)
library(viridis)
library(rgdal)
gg = ggplot(diamonds, aes(x, depth)) +
stat_density_2d(aes(fill = stat(nlevel)),
geom = "polygon",
n = 100,bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
plot_gg(gg,multicore=TRUE,width=5,height=5,scale=250)
library(MASS)
library(car)
install.packages("car")
library(car)
data(Cars93,package = "MASS")
force(Cars93)
View(Cars93)
summary(Cars93)
head(Cars93,5)
colnames <- colnames(Cars93)
dim(Cars93)
colnames
plot(c(1:93),t(Cars93["Min.Price"]))
barplot(summary(factor(Cars93[,1])))
Cars93$Manufacturer
unique(Cars93$Manufacturer)
length(unique(Cars93$Manufacturer))
Cars93['Manufacturer']
Cars93[1,]
Cars93[,1]
Cars93[1,1:5]
Cars93[1,:5]
Cars93[1,1:5]
barplot(summary(factor(Cars93[,3])))
plot(Cars93$Weight~Cars93$Price,main="Scatterplot Example",
xlab="Car Weight",ylab="Price",pch=19)
plot(c(1:93),t(Cars93["Min.Price"]))
plot(c(1:93),(Cars93["Min.Price"]))
t
plot(c(1:93),t(Cars93["Min.Price"]))
plot(c(1:93),(Cars93["Min.Price"]))
plot(c(1:93),t(Cars93["Min.Price"]))
abline(lm(Cars93$Weight~Cars93$Price),col="red")
lines(lowess(Cars93$Weight,Cars93$Price),col="blue")
x <- rnorm(100,0,1)
y <- rnorm(100,1,2)
t.test(x,y)
var.test(x,y)
qqplot(c(1:10),x)
plot(c(1:100),x)
plot(c(1:100),y)
prop.test()
prop.test(x)
prop.test(x,y)
var.test(x,y)
prop.test(x,y)
prop.test(x,100)
x <- rnorm(100,0,1)
prop.test(x,100)
prop.test(x,c(1:100))
t.test(x,y)
var.test(x,y)
library(MASS)
d<-Cars93
d
head(d)
dim(d)
names(d)
?Cars93
str(d)
mpg=(d$MPG.city+d$MPG.highway)/2
d$MPG.city=NULL
d$MPG.highway=NULL
d$Make=NULL
d$MPG.city=NULL
d$MPG.highway=NULL
d$Make=NULL
d$Model=NULL
head(d)
head(d)
d$Manufacturer=NULL
head(d)
str(D)
str(d)
Cars93$mpg=(d$MPG.city+d$MPG.highway)/2
d<-Cars93
Cars93$mpg=(d$MPG.city+d$MPG.highway)/2
d$MPG.city=NULL
d$MPG.highway=NULL
d$Make=NULL
d$Model=NULL
d$Manufacturer=NULL
str(d)
d<-Cars93
Cars93$mpg<-(d$MPG.city+d$MPG.highway)/2
str(d)
d$MPG.city=NULL
d$MPG.highway=NULL
d$Make=NULL
d$Model=NULL
d$Manufacturer=NULL
str(d)
lm(mpg~Horsepower,data=d)
summary(lm(mpg~Horsepower,data=d))
summary(lm(mpg~Horsepower,data=d))
plot(mpg,Horsepower)
plot(d$mpg,d$Horsepower)
summary(lm(mpg~Type,data=d))
d$Type
summary(d$Type)
library(MASS)
d<-Cars93
Cars93$mpg<-(d$MPG.city+d$MPG.highway)/2
d$MPG.city=NULL
d$MPG.highway=NULL
d$Make=NULL
d$Model=NULL
d$Manufacturer=NULL
summary(lm(mpg~Type,data=d))
Cars93$mpg<-(d$MPG.city+d$MPG.highway)/2
d<-Cars93
Cars93$mpg<-(d$MPG.city+d$MPG.highway)/2
d<-Cars93
d$mpg<-(d$MPG.city+d$MPG.highway)/2
d$MPG.city=NULL
d$MPG.highway=NULL
d$Make=NULL
d$Model=NULL
d$Manufacturer=NULL
str(d)
lm(mpg~Horsepower,data=d)
summary(lm(mpg~Horsepower,data=d))
plot(d$mpg,d$Horsepower)
summary(lm(mpg~Type,data=d))
summary(lm(mpg~Horsepower,data=d))
d<-d[which(d$Cylinders=="rotary"),]
d
d<-Cars93
d$mpg<-(d$MPG.city+d$MPG.highway)/2
d$MPG.city=NULL
d$MPG.highway=NULL
d$Make=NULL
d$Model=NULL
d$Manufacturer=NULL
d<-d[which(-d$Cylinders=="rotary"),]
d<-d[-which(d$Cylinders=="rotary"),]
d
summary(d$Cylinders)
d<-Cars93
d$mpg<-(d$MPG.city+d$MPG.highway)/2
d$MPG.city=NULL
d$MPG.highway=NULL
d$Make=NULL
d$Model=NULL
d$Manufacturer=NULL
d
which(d$Cylinders=="rotary")
d<-d[-57,]
d
d<-Cars93
d$mpg<-(d$MPG.city+d$MPG.highway)/2
d$MPG.city=NULL
d$MPG.highway=NULL
d$Make=NULL
d$Model=NULL
d$Manufacturer=NULL
d<-d[-which(d$Cylinders=="rotary"),]
d
summary(d$Cylinders)
d$Cylinders<-factor(d$Cylinders)
summary(d$Cylinders)
lm(mpg~Cylinders,data=d)
summary(lm(mpg~Cylinders,data=d))
d$Cylinders<-as.numeric(d$Cylinders)
summary(lm(mpg~Cylinders,data=d))
library(MASS)
d<-Cars93
d<-d[,x(1,2,4,6)]
d<-d[,c(1,2,4,6)]
d$mpg<-(d$MPG.city+d$MPG.highway)/2
d$MPG.city=NULL
d$MPG.highway=NULL
d$Make=NULL
which(d$Cylinderes=="rotary")
which(d$Cylinders=="rotary")
which(d$Cylinders=="rotary")
d
d<-Cars93
d<-d[,-c(1,2,4,6)]
d<-Cars93
d<-d[,-c(1,2,4,6)]
d$mpg<-(d$MPG.city+d$MPG.highway)/2
d$MPG.city=NULL
d$MPG.highway=NULL
d$Make=NULL
which(d$Cylinders=="rotary")
summary(lm(mpg$Price,data=d))
library(MASS)
d<-Cars93
d<-d[,-c(1,2,4,6)]
d$mpg<-(d$MPG.city+d$MPG.highway)/2
d$MPG.city=NULL
d$MPG.highway=NULL
d$Make=NULL
summary(lm(mpg$Price,data=d))
summary(lm(mpg~Price,data=d))
summary(d$Price)
summary(lm(mpg~AirBags,data=d))
summary(lm(mpg~EngineSizze,data=d))
summary(lm(mpg~EngineSize,data=d))
summary(lm(mpg~RPM,data=d))
summary(lm(mpg~Rev.per.mile,data=d))
cor(d$RPM,d$Rev.per.mile)
summary(lm(mpg~Man.trans.avail,data=d))
setwd("~/Documents/CS_Courses/CS_710/Final Project")
library(waffle)
library(magrittr)
library(hrbrthemes)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyquant)
library(reshape2)
library(tibble)
setwd("~/Documents/CS_Courses/CS_710/Final Project")
genre_list <- c("genre_1","genre_2","genre_3","genre_4","genre_5","genre_6","genre_7","genre_8","genre_9")
# DISNEY
disney <- read.csv(file = 'Data/disney_plus_shows.csv')
genre_split <- disney
genre_split$genre_temp <- genre_split$genre
genre_split <- separate(data = genre_split, col = genre_temp, into = genre_list, sep = ",\\s+")
genre_split$imdb_score <- as.numeric(genre_split$imdb_rating)
genre_split <- genre_split[!is.na(genre_split$imdb_score),]
genres_1 <- genre_split %>% group_by(genre=genre_1) %>% summarize(rating_1=mean(imdb_score), n_1 = n())
genres_2 <- genre_split %>% group_by(genre=genre_2) %>% summarize(rating_2=mean(imdb_score), n_2 = n()) %>% drop_na()
genres_3 <- genre_split %>% group_by(genre=genre_3) %>% summarize(rating_3=mean(imdb_score), n_3 = n()) %>% drop_na()
genres_4 <- genre_split %>% group_by(genre=genre_4) %>% summarize(rating_4=mean(imdb_score), n_4 = n()) %>% drop_na()
genres_5 <- genre_split %>% group_by(genre=genre_5) %>% summarize(rating_5=mean(imdb_score), n_5 = n()) %>% drop_na()
genres_6 <- genre_split %>% group_by(genre=genre_6) %>% summarize(rating_6=mean(imdb_score), n_6 = n()) %>% drop_na()
genres_7 <- genre_split %>% group_by(genre=genre_7) %>% summarize(rating_7=mean(imdb_score), n_7 = n()) %>% drop_na()
genres_8 <- genre_split %>% group_by(genre=genre_8) %>% summarize(rating_8=mean(imdb_score), n_8 = n()) %>% drop_na()
genres_9 <- genre_split %>% group_by(genre=genre_9) %>% summarize(rating_9=mean(imdb_score), n_9 = n()) %>% drop_na()
genres <- merge(x=genres_1,y=genres_2,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_3,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_4,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_5,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_6,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_7,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_8,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_9,by="genre",all=TRUE)
genres[is.na(genres)] <- 0
genres_group <- genres %>% group_by(genre) %>% summarise(mean_imdb = (rating_1*n_1+rating_2*n_2+rating_3*n_3+rating_4*n_4+rating_5*n_5+rating_6*n_6+rating_7*n_7+rating_8*n_8+rating_9*n_9)/(n_1+n_2+n_3+n_4+n_5+n_6+n_7+n_8+n_9),n = n_1+n_2+n_3+n_4+n_5+n_6+n_7+n_8+n_9)
genres_group <- as.data.frame(genres_group)
genres_group <- genres_group[order(genres_group$n,decreasing = TRUE),]
genres_ten <- head(genres_group[-c(1,9),],10)
genre_point <- ggplot(genres_ten, aes(x=genre,y=mean_imdb,size=n,color=n)) +
geom_point() +
geom_text(aes(label=n),color="white",family="Artifakt Element",size=6)+
theme_classic() +
scale_color_gradient(low="#111E4F",high="#74D3E6",guide=FALSE) +
scale_size_continuous(range = c(15, 42.5),guide=guide_legend(override.aes=list(size = c(7.5,10,12.5,15),colour=c("#111E4F","#325a81","#5396b3","#74D3E6")))) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
legend.background = element_rect(fill = "transparent",colour = NA),
legend.title = element_blank(),
legend.text = element_blank(),
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(color="#111E4F",size = 12, family="Artifakt Element"),
legend.key.width = unit(.5,"cm")
)
genre_point
ggsave("Images/Genre_Point.png", genre_point, width=11, height=7, bg = "transparent")
ggsave("Images/Genre_Point.png", genre_point, width=11, height=7, bg = "transparent")
genre_point <- ggplot(genres_ten, aes(x=genre,y=mean_imdb,size=n,color=n)) +
geom_point() +
geom_text(aes(label=n),color="white",family="Artifakt Element",size=6)+
theme_classic() +
scale_color_gradient(low="#111E4F",high="#74D3E6",guide=FALSE) +
scale_size_continuous(range = c(15, 40),guide=guide_legend(override.aes=list(size = c(7.5,10,12.5,15),colour=c("#111E4F","#325a81","#5396b3","#74D3E6")))) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
legend.background = element_rect(fill = "transparent",colour = NA),
legend.title = element_blank(),
legend.text = element_blank(),
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(color="#111E4F",size = 12, family="Artifakt Element"),
legend.key.width = unit(.5,"cm")
)
ggsave("Images/Genre_Point.png", genre_point, width=11, height=7, bg = "transparent")
library(waffle)
library(magrittr)
library(hrbrthemes)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyquant)
library(reshape2)
library(tibble)
setwd("~/Documents/CS_Courses/CS_710/Final Project")
genre_list <- c("genre_1","genre_2","genre_3","genre_4","genre_5","genre_6","genre_7","genre_8","genre_9")
genre_split <- disney
genre_split$genre_temp <- genre_split$genre
genre_split <- separate(data = genre_split, col = genre_temp, into = genre_list, sep = ",\\s+")
genre_split$imdb_score <- as.numeric(genre_split$imdb_rating)
genre_split <- genre_split[!is.na(genre_split$imdb_score),]
genres_1 <- genre_split %>% group_by(genre=genre_1) %>% summarize(rating_1=mean(imdb_score), n_1 = n())
genres_2 <- genre_split %>% group_by(genre=genre_2) %>% summarize(rating_2=mean(imdb_score), n_2 = n()) %>% drop_na()
genres_3 <- genre_split %>% group_by(genre=genre_3) %>% summarize(rating_3=mean(imdb_score), n_3 = n()) %>% drop_na()
genres_4 <- genre_split %>% group_by(genre=genre_4) %>% summarize(rating_4=mean(imdb_score), n_4 = n()) %>% drop_na()
genres_5 <- genre_split %>% group_by(genre=genre_5) %>% summarize(rating_5=mean(imdb_score), n_5 = n()) %>% drop_na()
genres_6 <- genre_split %>% group_by(genre=genre_6) %>% summarize(rating_6=mean(imdb_score), n_6 = n()) %>% drop_na()
genres_7 <- genre_split %>% group_by(genre=genre_7) %>% summarize(rating_7=mean(imdb_score), n_7 = n()) %>% drop_na()
genres_8 <- genre_split %>% group_by(genre=genre_8) %>% summarize(rating_8=mean(imdb_score), n_8 = n()) %>% drop_na()
genres_9 <- genre_split %>% group_by(genre=genre_9) %>% summarize(rating_9=mean(imdb_score), n_9 = n()) %>% drop_na()
genres <- merge(x=genres_1,y=genres_2,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_3,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_4,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_5,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_6,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_7,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_8,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_9,by="genre",all=TRUE)
genres[is.na(genres)] <- 0
genres_group <- genres %>% group_by(genre) %>% summarise(mean_imdb = (rating_1*n_1+rating_2*n_2+rating_3*n_3+rating_4*n_4+rating_5*n_5+rating_6*n_6+rating_7*n_7+rating_8*n_8+rating_9*n_9)/(n_1+n_2+n_3+n_4+n_5+n_6+n_7+n_8+n_9),n = n_1+n_2+n_3+n_4+n_5+n_6+n_7+n_8+n_9)
genres_group <- as.data.frame(genres_group)
genres_group <- genres_group[order(genres_group$n,decreasing = TRUE),]
genres_ten <- head(genres_group[-c(1,9),],10)
# DISNEY
disney <- read.csv(file = 'Data/disney_plus_shows.csv')
setwd("~/Documents/CS_Courses/CS_710/Final Project")
# DISNEY
disney <- read.csv(file = 'Data/disney_plus_shows.csv')
genre_list <- c("genre_1","genre_2","genre_3","genre_4","genre_5","genre_6","genre_7","genre_8","genre_9")
genre_split <- disney
genre_split$genre_temp <- genre_split$genre
genre_split <- separate(data = genre_split, col = genre_temp, into = genre_list, sep = ",\\s+")
genre_split$imdb_score <- as.numeric(genre_split$imdb_rating)
genre_split <- genre_split[!is.na(genre_split$imdb_score),]
genres_1 <- genre_split %>% group_by(genre=genre_1) %>% summarize(rating_1=mean(imdb_score), n_1 = n())
genres_2 <- genre_split %>% group_by(genre=genre_2) %>% summarize(rating_2=mean(imdb_score), n_2 = n()) %>% drop_na()
genres_3 <- genre_split %>% group_by(genre=genre_3) %>% summarize(rating_3=mean(imdb_score), n_3 = n()) %>% drop_na()
genres_4 <- genre_split %>% group_by(genre=genre_4) %>% summarize(rating_4=mean(imdb_score), n_4 = n()) %>% drop_na()
genres_5 <- genre_split %>% group_by(genre=genre_5) %>% summarize(rating_5=mean(imdb_score), n_5 = n()) %>% drop_na()
genres_6 <- genre_split %>% group_by(genre=genre_6) %>% summarize(rating_6=mean(imdb_score), n_6 = n()) %>% drop_na()
genres_7 <- genre_split %>% group_by(genre=genre_7) %>% summarize(rating_7=mean(imdb_score), n_7 = n()) %>% drop_na()
genres_8 <- genre_split %>% group_by(genre=genre_8) %>% summarize(rating_8=mean(imdb_score), n_8 = n()) %>% drop_na()
genres_9 <- genre_split %>% group_by(genre=genre_9) %>% summarize(rating_9=mean(imdb_score), n_9 = n()) %>% drop_na()
genres <- merge(x=genres_1,y=genres_2,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_3,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_4,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_5,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_6,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_7,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_8,by="genre",all=TRUE)
genres <- merge(x=genres,y=genres_9,by="genre",all=TRUE)
genres[is.na(genres)] <- 0
genres_group <- genres %>% group_by(genre) %>% summarise(mean_imdb = (rating_1*n_1+rating_2*n_2+rating_3*n_3+rating_4*n_4+rating_5*n_5+rating_6*n_6+rating_7*n_7+rating_8*n_8+rating_9*n_9)/(n_1+n_2+n_3+n_4+n_5+n_6+n_7+n_8+n_9),n = n_1+n_2+n_3+n_4+n_5+n_6+n_7+n_8+n_9)
genres_group <- as.data.frame(genres_group)
genres_group <- genres_group[order(genres_group$n,decreasing = TRUE),]
genres_ten <- head(genres_group[-c(1,9),],10)
genres_ten$date
genre_ten <- genres_ten$genre
genre_split <- genre_split %>% add_column(genres_ten = NA)
for (row in 1:nrow(genre_split)) {
genre_ten <- sample(genre_ten)
for (genre in genre_ten) {
if (grepl(genre,genre_split[row,"genre"],fixed=TRUE)) {
genre_split[row,"genres_ten"] <- genre
break
}
}
}
genre_split <- genre_split[!is.na(genre_split$genres_ten),]
genre_split$date_released <- as.Date(genre_split$released_at,"%d %b %Y")
genre_split <- genre_split[!is.na(genre_split$date_released),]
genre_year <- genre_split %>% group_by()
summary(genre_split$date_released)
summary(genre_split$date_released)
genre_temp <- genre_split
genre_temp <- genre_temp %>% mutate(year = year(date_released)) %>% group_by(year) %>% summarize(avg_imdb=mean(imdb_score))
genre_temp$year <- as.Date(as.character(genre_temp$year),"%Y")
time_plot <- ggplot() +
geom_point(data=genre_split,aes(x=date_released,y=imdb_score,color=genres_ten)) +
geom_line(data=genre_temp,aes(x=year,y=avg_imdb),color = "#111E4F",size=1.5) +
theme_classic() +
scale_colour_manual(name="Genre",values=c("#111E4F","#1c325f","#274670","#325a81","#3c6e92","#4882a2","#5396b3","#5eaac4","#68bed5","#74D3E6")) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
legend.background = element_rect(fill = "transparent",colour = NA),
legend.title = element_blank(),
legend.text = element_blank(),
axis.title = element_blank(),
axis.text = element_text(color="#111E4F",size = 12, family="Artifakt Element")
)
time_plot
View(genres_ten)
View(genre_temp)
genre_avg <- genre_split
genre_avg <- genre_avg %>% mutate(year = year(date_released)) %>% group_by(year) %>% summarize(avg_imdb=mean(imdb_score))
genre_avg$year <- as.Date(as.character(genre_avg$year),"%Y")
time_plot <- ggplot() +
geom_point(data=genre_split,aes(x=date_released,y=imdb_score,color=genres_ten)) +
geom_line(data=genre_avgewf,aes(x=year,y=avg_imdb),color = "#111E4F",size=1.5) +
theme_classic() +
scale_colour_manual(name="Genre",values=c("#111E4F","#1c325f","#274670","#325a81","#3c6e92","#4882a2","#5396b3","#5eaac4","#68bed5","#74D3E6")) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
legend.background = element_rect(fill = "transparent",colour = NA),
legend.title = element_blank(),
legend.text = element_blank(),
axis.title = element_blank(),
axis.text = element_text(color="#111E4F",size = 12, family="Artifakt Element")
)
time_plot <- ggplot() +
geom_point(data=genre_split,aes(x=date_released,y=imdb_score,color=genres_ten)) +
geom_line(data=genre_avg,aes(x=year,y=avg_imdb),color = "#111E4F",size=1.5) +
theme_classic() +
scale_colour_manual(name="Genre",values=c("#111E4F","#1c325f","#274670","#325a81","#3c6e92","#4882a2","#5396b3","#5eaac4","#68bed5","#74D3E6")) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent",colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA),
legend.background = element_rect(fill = "transparent",colour = NA),
legend.title = element_blank(),
legend.text = element_blank(),
axis.title = element_blank(),
axis.text = element_text(color="#111E4F",size = 12, family="Artifakt Element")
)
time_plot
